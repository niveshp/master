
/*
*  Warewolf - The Easy Service Bus
*  Copyright 2014 by Warewolf Ltd <alpha@warewolf.io>
*  Licensed under GNU Affero General Public License 3.0 or later. 
*  Some rights reserved.
*  Visit our website for more information <http://warewolf.io/>
*  AUTHORS <http://warewolf.io/authors.php> , CONTRIBUTORS <http://warewolf.io/contributors.php>
*  @license GNU Affero General Public License <http://www.gnu.org/licenses/agpl-3.0.html>
*/


// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.18444
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Dev2.Activities.Specs.Toolbox.ControlFlow.Sequence
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class SequenceFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Sequence.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Sequence", "In order to execute sequence \r\nAs a Warewolf user\r\nI want to a tool that will all" +
                    "ow me to construct and execute tools and services in sequence", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((TechTalk.SpecFlow.FeatureContext.Current != null) 
                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != "Sequence")))
            {
                Dev2.Activities.Specs.Toolbox.ControlFlow.Sequence.SequenceFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Execute Sequence with Assign")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Sequence")]
        public virtual void ExecuteSequenceWithAssign()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Execute Sequence with Assign", ((string[])(null)));
#line 6
this.ScenarioSetup(scenarioInfo);
#line 7
          testRunner.Given("I have a Sequence \"Test\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table1.AddRow(new string[] {
                        "[[var1]]",
                        "1"});
            table1.AddRow(new string[] {
                        "[[var2]]",
                        "2"});
#line 8
          testRunner.And("\"Test\" contains an Assign \"TestAssign\" as", ((string)(null)), table1, "And ");
#line 12
          testRunner.When("the Sequence tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 13
          testRunner.Then("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table2.AddRow(new string[] {
                        "1",
                        "[[var1]] =",
                        "1"});
            table2.AddRow(new string[] {
                        "2",
                        "[[var2]] =",
                        "2"});
#line 14
          testRunner.And("the \"TestAssign\" debug inputs as", ((string)(null)), table2, "And ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table3.AddRow(new string[] {
                        "1",
                        "[[var1]] = 1"});
            table3.AddRow(new string[] {
                        "2",
                        "[[var2]] = 2"});
#line 18
          testRunner.And("the \"TestAssign\" debug outputs as", ((string)(null)), table3, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Execute a Sequence with Assign and Calculate")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Sequence")]
        public virtual void ExecuteASequenceWithAssignAndCalculate()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Execute a Sequence with Assign and Calculate", ((string[])(null)));
#line 23
this.ScenarioSetup(scenarioInfo);
#line 24
       testRunner.Given("I have a Sequence \"Test\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table4.AddRow(new string[] {
                        "[[var1]]",
                        "1"});
            table4.AddRow(new string[] {
                        "[[var2]]",
                        "2"});
#line 25
    testRunner.And("\"Test\" contains an Assign \"SetVariables\" as", ((string)(null)), table4, "And ");
#line 29
       testRunner.And("\"Test\" contains Calculate \"Calculate Sum\" with formula \"[[var1]]+[[var2]]\" into \"" +
                    "[[result]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 30
       testRunner.When("the Sequence tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 31
       testRunner.Then("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table5.AddRow(new string[] {
                        "1",
                        "[[var1]] =",
                        "1"});
            table5.AddRow(new string[] {
                        "2",
                        "[[var2]] =",
                        "2"});
#line 32
       testRunner.And("the \"SetVariables\" debug inputs as", ((string)(null)), table5, "And ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table6.AddRow(new string[] {
                        "1",
                        "[[var1]] = 1"});
            table6.AddRow(new string[] {
                        "2",
                        "[[var2]] = 2"});
#line 36
       testRunner.And("the \"SetVariables\" debug outputs as", ((string)(null)), table6, "And ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "fx ="});
            table7.AddRow(new string[] {
                        "[[var1]]+[[var2]] = 1+2"});
#line 40
       testRunner.And("the \"Calculate Sum\" debug inputs as", ((string)(null)), table7, "And ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table8.AddRow(new string[] {
                        "[[result]] = 3"});
#line 43
       testRunner.And("the \"Calculate Sum\" debug outputs as", ((string)(null)), table8, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Execute a Sequence with Assign and Count")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Sequence")]
        public virtual void ExecuteASequenceWithAssignAndCount()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Execute a Sequence with Assign and Count", ((string[])(null)));
#line 47
 this.ScenarioSetup(scenarioInfo);
#line 48
      testRunner.Given("I have a Sequence \"Test\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table9.AddRow(new string[] {
                        "[[rec().a]]",
                        "1"});
            table9.AddRow(new string[] {
                        "[[rec().a]]",
                        "2"});
            table9.AddRow(new string[] {
                        "[[rec().a]]",
                        "3"});
            table9.AddRow(new string[] {
                        "[[rec().a]]",
                        "4"});
#line 49
   testRunner.And("\"Test\" contains an Assign \"Records\" as", ((string)(null)), table9, "And ");
#line 55
   testRunner.And("\"Test\" contains Count Record \"Count\" on \"[[rec()]]\" into \"[[result]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 56
   testRunner.When("the Sequence tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 57
      testRunner.Then("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table10.AddRow(new string[] {
                        "1",
                        "[[rec().a]] =",
                        "1"});
            table10.AddRow(new string[] {
                        "2",
                        "[[rec().a]] =",
                        "2"});
            table10.AddRow(new string[] {
                        "3",
                        "[[rec().a]] =",
                        "3"});
            table10.AddRow(new string[] {
                        "4",
                        "[[rec().a]] =",
                        "4"});
#line 58
   testRunner.And("the \"Records\" debug inputs as", ((string)(null)), table10, "And ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table11.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] =  1"});
            table11.AddRow(new string[] {
                        "2",
                        "[[rec(2).a]] =  2"});
            table11.AddRow(new string[] {
                        "3",
                        "[[rec(3).a]] =  3"});
            table11.AddRow(new string[] {
                        "4",
                        "[[rec(4).a]] =  4"});
#line 64
   testRunner.And("the \"Records\" debug outputs as", ((string)(null)), table11, "And ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Recordset"});
            table12.AddRow(new string[] {
                        "[[rec(1).a]] = 1"});
            table12.AddRow(new string[] {
                        "[[rec(2).a]] = 2"});
            table12.AddRow(new string[] {
                        "[[rec(3).a]] = 3"});
            table12.AddRow(new string[] {
                        "[[rec(4).a]] = 4"});
#line 70
   testRunner.And("the \"Count\" debug inputs as", ((string)(null)), table12, "And ");
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table13.AddRow(new string[] {
                        "[[result]] = 4"});
#line 76
   testRunner.And("the \"Count\" debug outputs as", ((string)(null)), table13, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Execute a Sequence with Assign and Delete")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Sequence")]
        public virtual void ExecuteASequenceWithAssignAndDelete()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Execute a Sequence with Assign and Delete", ((string[])(null)));
#line 80
this.ScenarioSetup(scenarioInfo);
#line 81
      testRunner.Given("I have a Sequence \"Test\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table14.AddRow(new string[] {
                        "[[rec().a]]",
                        "1"});
            table14.AddRow(new string[] {
                        "[[rec().a]]",
                        "2"});
            table14.AddRow(new string[] {
                        "[[rec().a]]",
                        "3"});
            table14.AddRow(new string[] {
                        "[[rec().a]]",
                        "4"});
#line 82
   testRunner.And("\"Test\" contains an Assign \"All Records\" as", ((string)(null)), table14, "And ");
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "result"});
            table15.AddRow(new string[] {
                        "[[rec(2)]]",
                        "[[result]]"});
#line 88
   testRunner.And("\"Test\" contains Delete \"Delete Record\" as", ((string)(null)), table15, "And ");
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table16.AddRow(new string[] {
                        "[[check]]",
                        "[[rec(2).a]]"});
#line 91
      testRunner.And("\"Test\" contains an Assign \"Delete check\" as", ((string)(null)), table16, "And ");
#line 94
   testRunner.When("the Sequence tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 95
      testRunner.Then("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table17.AddRow(new string[] {
                        "1",
                        "[[rec().a]] =",
                        "1"});
            table17.AddRow(new string[] {
                        "2",
                        "[[rec().a]] =",
                        "2"});
            table17.AddRow(new string[] {
                        "3",
                        "[[rec().a]] =",
                        "3"});
            table17.AddRow(new string[] {
                        "4",
                        "[[rec().a]] =",
                        "4"});
#line 96
   testRunner.And("the \"All Records\" debug inputs as", ((string)(null)), table17, "And ");
#line hidden
            TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table18.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = 1"});
            table18.AddRow(new string[] {
                        "2",
                        "[[rec(2).a]] = 2"});
            table18.AddRow(new string[] {
                        "3",
                        "[[rec(3).a]] = 3"});
            table18.AddRow(new string[] {
                        "4",
                        "[[rec(4).a]] = 4"});
#line 102
   testRunner.And("the \"All Records\" debug outputs as", ((string)(null)), table18, "And ");
#line hidden
            TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                        "Records"});
            table19.AddRow(new string[] {
                        "[[rec(2).a]] = 2"});
#line 108
   testRunner.And("the \"Delete Record\" debug inputs as", ((string)(null)), table19, "And ");
#line hidden
            TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table20.AddRow(new string[] {
                        "[[result]] = Success"});
#line 111
   testRunner.And("the \"Delete Record\" debug outputs as", ((string)(null)), table20, "And ");
#line hidden
            TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table21.AddRow(new string[] {
                        "1",
                        "[[check]] =",
                        "[[rec(2).a]] ="});
#line 114
   testRunner.And("the \"Delete check\" debug inputs as", ((string)(null)), table21, "And ");
#line hidden
            TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table22.AddRow(new string[] {
                        "1",
                        "[[check]] ="});
#line 117
   testRunner.And("the \"Delete check\" debug outputs as", ((string)(null)), table22, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Execute a Sequence with Assign and Find Record Index")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Sequence")]
        public virtual void ExecuteASequenceWithAssignAndFindRecordIndex()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Execute a Sequence with Assign and Find Record Index", ((string[])(null)));
#line 122
this.ScenarioSetup(scenarioInfo);
#line 123
      testRunner.Given("I have a Sequence \"Test\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table23.AddRow(new string[] {
                        "[[rec().a]]",
                        "1"});
            table23.AddRow(new string[] {
                        "[[rec().a]]",
                        "2"});
            table23.AddRow(new string[] {
                        "[[rec().a]]",
                        "3"});
            table23.AddRow(new string[] {
                        "[[rec().a]]",
                        "4"});
#line 124
   testRunner.And("\"Test\" contains an Assign \"Assign Records\" as", ((string)(null)), table23, "And ");
#line hidden
            TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                        "Match Type",
                        "Match"});
            table24.AddRow(new string[] {
                        "=",
                        "1"});
#line 130
   testRunner.And("\"Test\" contains Find Record Index \"Find Record\" search \"[[rec().a]]\" and result \"" +
                    "[[result]]\" as", ((string)(null)), table24, "And ");
#line 133
   testRunner.When("the Sequence tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 134
      testRunner.Then("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table25 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table25.AddRow(new string[] {
                        "1",
                        "[[rec().a]] =",
                        "1"});
            table25.AddRow(new string[] {
                        "2",
                        "[[rec().a]] =",
                        "2"});
            table25.AddRow(new string[] {
                        "3",
                        "[[rec().a]] =",
                        "3"});
            table25.AddRow(new string[] {
                        "4",
                        "[[rec().a]] =",
                        "4"});
#line 135
   testRunner.And("the \"Assign Records\" debug inputs as", ((string)(null)), table25, "And ");
#line hidden
            TechTalk.SpecFlow.Table table26 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table26.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = 1"});
            table26.AddRow(new string[] {
                        "2",
                        "[[rec(2).a]] = 2"});
            table26.AddRow(new string[] {
                        "3",
                        "[[rec(3).a]] = 3"});
            table26.AddRow(new string[] {
                        "4",
                        "[[rec(4).a]] = 4"});
#line 141
   testRunner.And("the \"Assign Records\" debug outputs as", ((string)(null)), table26, "And ");
#line hidden
            TechTalk.SpecFlow.Table table27 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table27.AddRow(new string[] {
                        "In Field(s)",
                        "[[rec(1).a]] = 1",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table27.AddRow(new string[] {
                        "",
                        "[[rec(2).a]] = 2",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table27.AddRow(new string[] {
                        "",
                        "[[rec(3).a]] = 3",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table27.AddRow(new string[] {
                        "",
                        "[[rec(4).a]] = 4",
                        "1",
                        "=",
                        "1",
                        "",
                        "NO",
                        "NO"});
#line 147
   testRunner.And("the \"Find Record\" debug inputs as", ((string)(null)), table27, "And ");
#line hidden
            TechTalk.SpecFlow.Table table28 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table28.AddRow(new string[] {
                        "[[result]] = 1"});
#line 153
   testRunner.And("the \"Find Record\" debug outputs as", ((string)(null)), table28, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Execute a Sequence with Assign and Unique Records")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Sequence")]
        public virtual void ExecuteASequenceWithAssignAndUniqueRecords()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Execute a Sequence with Assign and Unique Records", ((string[])(null)));
#line 158
this.ScenarioSetup(scenarioInfo);
#line 159
      testRunner.Given("I have a Sequence \"Test\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table29 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table29.AddRow(new string[] {
                        "[[rec().a]]",
                        "11"});
            table29.AddRow(new string[] {
                        "[[rec().a]]",
                        "11"});
            table29.AddRow(new string[] {
                        "[[rec().a]]",
                        "11"});
            table29.AddRow(new string[] {
                        "[[rec().a]]",
                        "12"});
            table29.AddRow(new string[] {
                        "[[rec().a]]",
                        "12"});
            table29.AddRow(new string[] {
                        "[[rec().a]]",
                        "13"});
            table29.AddRow(new string[] {
                        "[[rec().a]]",
                        "13"});
            table29.AddRow(new string[] {
                        "[[rec().a]]",
                        "13"});
#line 160
   testRunner.And("\"Test\" contains an Assign \"Assign data\" as", ((string)(null)), table29, "And ");
#line hidden
            TechTalk.SpecFlow.Table table30 = new TechTalk.SpecFlow.Table(new string[] {
                        "In Fields",
                        "Return Fields",
                        "Result"});
            table30.AddRow(new string[] {
                        "[[rec(*).a]]",
                        "[[rec().a]]",
                        "[[rec().unique]]"});
#line 170
      testRunner.And("\"Test\" contains find unique \"Unique\" as", ((string)(null)), table30, "And ");
#line 173
      testRunner.When("the Sequence tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 174
   testRunner.Then("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table31 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table31.AddRow(new string[] {
                        "1",
                        "[[rec().a]] =",
                        "11"});
            table31.AddRow(new string[] {
                        "2",
                        "[[rec().a]] =",
                        "11"});
            table31.AddRow(new string[] {
                        "3",
                        "[[rec().a]] =",
                        "11"});
            table31.AddRow(new string[] {
                        "4",
                        "[[rec().a]] =",
                        "12"});
            table31.AddRow(new string[] {
                        "5",
                        "[[rec().a]] =",
                        "12"});
            table31.AddRow(new string[] {
                        "6",
                        "[[rec().a]] =",
                        "13"});
            table31.AddRow(new string[] {
                        "7",
                        "[[rec().a]] =",
                        "13"});
            table31.AddRow(new string[] {
                        "8",
                        "[[rec().a]] =",
                        "13"});
#line 175
   testRunner.And("the \"Assign data\" debug inputs as", ((string)(null)), table31, "And ");
#line hidden
            TechTalk.SpecFlow.Table table32 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table32.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] =  11"});
            table32.AddRow(new string[] {
                        "2",
                        "[[rec(2).a]] =  11"});
            table32.AddRow(new string[] {
                        "3",
                        "[[rec(3).a]] =  11"});
            table32.AddRow(new string[] {
                        "4",
                        "[[rec(4).a]] =  12"});
            table32.AddRow(new string[] {
                        "5",
                        "[[rec(5).a]] =  12"});
            table32.AddRow(new string[] {
                        "6",
                        "[[rec(6).a]] =  13"});
            table32.AddRow(new string[] {
                        "7",
                        "[[rec(7).a]] =  13"});
            table32.AddRow(new string[] {
                        "8",
                        "[[rec(8).a]] =  13"});
#line 185
   testRunner.And("the \"Assign data\" debug outputs as", ((string)(null)), table32, "And ");
#line hidden
            TechTalk.SpecFlow.Table table33 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "Return Fields"});
            table33.AddRow(new string[] {
                        "In Field(s)",
                        "[[rec(1).a]] = 11",
                        ""});
            table33.AddRow(new string[] {
                        "",
                        "[[rec(2).a]] = 11",
                        ""});
            table33.AddRow(new string[] {
                        "",
                        "[[rec(3).a]] = 11",
                        ""});
            table33.AddRow(new string[] {
                        "",
                        "[[rec(4).a]] = 12",
                        ""});
            table33.AddRow(new string[] {
                        "",
                        "[[rec(5).a]] = 12",
                        ""});
            table33.AddRow(new string[] {
                        "",
                        "[[rec(6).a]] = 13",
                        ""});
            table33.AddRow(new string[] {
                        "",
                        "[[rec(7).a]] = 13",
                        ""});
            table33.AddRow(new string[] {
                        "",
                        "[[rec(8).a]] = 13",
                        "[[rec().a]]  ="});
#line 195
   testRunner.And("the \"Unique\" debug inputs as", ((string)(null)), table33, "And ");
#line hidden
            TechTalk.SpecFlow.Table table34 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table34.AddRow(new string[] {
                        "1",
                        "[[rec(9).unique]] = 11"});
            table34.AddRow(new string[] {
                        "",
                        "[[rec(10).unique]] = 12"});
            table34.AddRow(new string[] {
                        "",
                        "[[rec(11).unique]] = 13"});
#line 205
   testRunner.And("the \"Unique\" debug outputs as", ((string)(null)), table34, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Execute a Sequence with Assign, Base Convert and Case Convert")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Sequence")]
        public virtual void ExecuteASequenceWithAssignBaseConvertAndCaseConvert()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Execute a Sequence with Assign, Base Convert and Case Convert", ((string[])(null)));
#line 212
this.ScenarioSetup(scenarioInfo);
#line 213
      testRunner.Given("I have a Sequence \"Test\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table35 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table35.AddRow(new string[] {
                        "[[rec().a]]",
                        "0x4141"});
            table35.AddRow(new string[] {
                        "[[rec().a]]",
                        "warewolf"});
#line 214
   testRunner.And("\"Test\" contains an Assign \"Rec To Convert\" as", ((string)(null)), table35, "And ");
#line hidden
            TechTalk.SpecFlow.Table table36 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "Type"});
            table36.AddRow(new string[] {
                        "[[rec(2).a]]",
                        "UPPER"});
#line 218
      testRunner.And("\"Test\" contains case convert \"Case Convert\" as", ((string)(null)), table36, "And ");
#line hidden
            TechTalk.SpecFlow.Table table37 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "From",
                        "To"});
            table37.AddRow(new string[] {
                        "[[rec(1).a]]",
                        "Hex",
                        "Binary"});
#line 221
   testRunner.And("\"Test\" contains Base convert \"Base Convert\" as", ((string)(null)), table37, "And ");
#line 224
   testRunner.When("the Sequence tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 225
   testRunner.Then("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table38 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table38.AddRow(new string[] {
                        "1",
                        "[[rec().a]] =",
                        "0x4141"});
            table38.AddRow(new string[] {
                        "2",
                        "[[rec().a]] =",
                        "warewolf"});
#line 226
   testRunner.And("the \"Rec To Convert\" debug inputs as", ((string)(null)), table38, "And ");
#line hidden
            TechTalk.SpecFlow.Table table39 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table39.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = 0x4141"});
            table39.AddRow(new string[] {
                        "2",
                        "[[rec(2).a]] = warewolf"});
#line 230
   testRunner.And("the \"Rec To Convert\" debug outputs as", ((string)(null)), table39, "And ");
#line hidden
            TechTalk.SpecFlow.Table table40 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Convert",
                        "To"});
            table40.AddRow(new string[] {
                        "1",
                        "[[rec(2).a]] = warewolf",
                        "UPPER"});
#line 234
   testRunner.And("the \"Case Convert\" debug inputs as", ((string)(null)), table40, "And ");
#line hidden
            TechTalk.SpecFlow.Table table41 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table41.AddRow(new string[] {
                        "1",
                        "[[rec(2).a]] = WAREWOLF"});
#line 237
   testRunner.And("the \"Case Convert\" debug outputs as", ((string)(null)), table41, "And ");
#line hidden
            TechTalk.SpecFlow.Table table42 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Convert",
                        "From",
                        "To"});
            table42.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = 0x4141",
                        "Hex",
                        "Binary"});
#line 240
   testRunner.And("the \"Base Convert\" debug inputs as", ((string)(null)), table42, "And ");
#line hidden
            TechTalk.SpecFlow.Table table43 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table43.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = 0100000101000001"});
#line 243
   testRunner.And("the \"Base Convert\" debug outputs as", ((string)(null)), table43, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Execute a Sequence with Assign, Data Merge and Data Split")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Sequence")]
        public virtual void ExecuteASequenceWithAssignDataMergeAndDataSplit()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Execute a Sequence with Assign, Data Merge and Data Split", ((string[])(null)));
#line 247
this.ScenarioSetup(scenarioInfo);
#line 248
      testRunner.Given("I have a Sequence \"Test\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table44 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table44.AddRow(new string[] {
                        "[[rec().a]]",
                        "test"});
            table44.AddRow(new string[] {
                        "[[rec().b]]",
                        "nothing"});
            table44.AddRow(new string[] {
                        "[[rec().a]]",
                        "warewolf"});
            table44.AddRow(new string[] {
                        "[[rec().b]]",
                        "nothing"});
#line 249
   testRunner.And("\"Test\" contains an Assign \"Assign To Merge\" as", ((string)(null)), table44, "And ");
#line hidden
            TechTalk.SpecFlow.Table table45 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "Type",
                        "Using",
                        "Padding",
                        "Alignment"});
            table45.AddRow(new string[] {
                        "[[rec(1).a]]",
                        "Index",
                        "4",
                        "",
                        "Left"});
            table45.AddRow(new string[] {
                        "[[rec(2).a]]",
                        "Index",
                        "8",
                        "",
                        "Left"});
#line 255
   testRunner.And("\"Test\" contains Data Merge \"Data Merge\" into \"[[result]]\" as", ((string)(null)), table45, "And ");
#line hidden
            TechTalk.SpecFlow.Table table46 = new TechTalk.SpecFlow.Table(new string[] {
                        "String",
                        "Variable",
                        "Type",
                        "At",
                        "Include",
                        "Escape"});
            table46.AddRow(new string[] {
                        "testwarewolf",
                        "[[rec(1).b]]",
                        "Index",
                        "4",
                        "Unselected",
                        ""});
            table46.AddRow(new string[] {
                        "",
                        "[[rec(2).b]]",
                        "Index",
                        "8",
                        "Unselected",
                        ""});
#line 259
   testRunner.And("\"Test\" contains Data Split \"Data Split\" as", ((string)(null)), table46, "And ");
#line 263
   testRunner.When("the Sequence tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 264
   testRunner.Then("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table47 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table47.AddRow(new string[] {
                        "1",
                        "[[rec().a]] =",
                        "test"});
            table47.AddRow(new string[] {
                        "2",
                        "[[rec().b]] =",
                        "nothing"});
            table47.AddRow(new string[] {
                        "3",
                        "[[rec().a]] =",
                        "warewolf"});
            table47.AddRow(new string[] {
                        "4",
                        "[[rec().b]] =",
                        "nothing"});
#line 265
   testRunner.And("the \"Assign To Merge\" debug inputs as", ((string)(null)), table47, "And ");
#line hidden
            TechTalk.SpecFlow.Table table48 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table48.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] =  test"});
            table48.AddRow(new string[] {
                        "2",
                        "[[rec(1).b]] = nothing"});
            table48.AddRow(new string[] {
                        "3",
                        "[[rec(2).a]] =  warewolf"});
            table48.AddRow(new string[] {
                        "4",
                        "[[rec(2).b]] =  nothing"});
#line 271
   testRunner.And("the \"Assign To Merge\" debug outputs as", ((string)(null)), table48, "And ");
#line hidden
            TechTalk.SpecFlow.Table table49 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "With",
                        "Using",
                        "Pad",
                        "Align"});
            table49.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] =  test",
                        "Index",
                        "\"4\"",
                        "\"\"",
                        "Left"});
            table49.AddRow(new string[] {
                        "2",
                        "[[rec(2).a]] =  warewolf",
                        "Index",
                        "\"8\"",
                        "\"\"",
                        "Left"});
#line 277
   testRunner.And("the \"Data Merge\" debug inputs as", ((string)(null)), table49, "And ");
#line hidden
            TechTalk.SpecFlow.Table table50 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table50.AddRow(new string[] {
                        "[[result]] = testwarewolf"});
#line 281
   testRunner.And("the \"Data Merge\" debug outputs as", ((string)(null)), table50, "And ");
#line hidden
            TechTalk.SpecFlow.Table table51 = new TechTalk.SpecFlow.Table(new string[] {
                        "String to Split",
                        "Process Direction",
                        "Skip blank rows",
                        "#",
                        "",
                        "With",
                        "Using",
                        "Include",
                        "Escape"});
            table51.AddRow(new string[] {
                        "testwarewolf",
                        "Forward",
                        "No",
                        "1",
                        "[[rec(1).b]] = nothing",
                        "Index",
                        "4",
                        "No",
                        ""});
            table51.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "2",
                        "[[rec(2).b]] = nothing",
                        "Index",
                        "8",
                        "No",
                        ""});
#line 284
   testRunner.And("the \"Data Split\" debug inputs as", ((string)(null)), table51, "And ");
#line hidden
            TechTalk.SpecFlow.Table table52 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table52.AddRow(new string[] {
                        "1",
                        "[[rec(1).b]] = test"});
            table52.AddRow(new string[] {
                        "2",
                        "[[rec(2).b]] = warewolf"});
#line 288
   testRunner.And("the \"Data Split\" debug outputs as", ((string)(null)), table52, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Execute a Sequence with Assign, Data Merge, Data Split, Find Index and Replace")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Sequence")]
        public virtual void ExecuteASequenceWithAssignDataMergeDataSplitFindIndexAndReplace()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Execute a Sequence with Assign, Data Merge, Data Split, Find Index and Replace", ((string[])(null)));
#line 294
this.ScenarioSetup(scenarioInfo);
#line 295
      testRunner.Given("I have a Sequence \"Test\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table53 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table53.AddRow(new string[] {
                        "[[rec().a]]",
                        "test"});
            table53.AddRow(new string[] {
                        "[[rec().b]]",
                        "nothing"});
            table53.AddRow(new string[] {
                        "[[rec().a]]",
                        "warewolf"});
            table53.AddRow(new string[] {
                        "[[rec().b]]",
                        "nothing"});
#line 296
   testRunner.And("\"Test\" contains an Assign \"Assign To Merge\" as", ((string)(null)), table53, "And ");
#line hidden
            TechTalk.SpecFlow.Table table54 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "Type",
                        "Using",
                        "Padding",
                        "Alignment"});
            table54.AddRow(new string[] {
                        "[[rec(1).a]]",
                        "Index",
                        "4",
                        "",
                        "Left"});
            table54.AddRow(new string[] {
                        "[[rec(2).a]]",
                        "Index",
                        "8",
                        "",
                        "Left"});
#line 302
   testRunner.And("\"Test\" contains Data Merge \"Data Merge\" into \"[[result]]\" as", ((string)(null)), table54, "And ");
#line hidden
            TechTalk.SpecFlow.Table table55 = new TechTalk.SpecFlow.Table(new string[] {
                        "String",
                        "Variable",
                        "Type",
                        "At",
                        "Include",
                        "Escape"});
            table55.AddRow(new string[] {
                        "testwarewolf",
                        "[[rec(1).b]]",
                        "Index",
                        "4",
                        "Unselected",
                        ""});
            table55.AddRow(new string[] {
                        "",
                        "[[rec(2).b]]",
                        "Index",
                        "8",
                        "Unselected",
                        ""});
#line 306
   testRunner.And("\"Test\" contains Data Split \"Data Split\" as", ((string)(null)), table55, "And ");
#line hidden
            TechTalk.SpecFlow.Table table56 = new TechTalk.SpecFlow.Table(new string[] {
                        "In Fields",
                        "Index",
                        "Character",
                        "Direction"});
            table56.AddRow(new string[] {
                        "[[rec().a]]",
                        "First Occurence",
                        "e",
                        "Left to Right"});
#line 310
   testRunner.And("\"Test\" contains Find Index \"Index\" into \"[[indexResult]]\" as", ((string)(null)), table56, "And ");
#line hidden
            TechTalk.SpecFlow.Table table57 = new TechTalk.SpecFlow.Table(new string[] {
                        "In Fields",
                        "Find",
                        "Replace With"});
            table57.AddRow(new string[] {
                        "[[rec(*)]]",
                        "e",
                        "REPLACED"});
#line 313
   testRunner.And("\"Test\" contains Replace \"Replacing\" into \"[[replaceResult]]\" as", ((string)(null)), table57, "And ");
#line 316
   testRunner.When("the Sequence tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 317
   testRunner.Then("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table58 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table58.AddRow(new string[] {
                        "1",
                        "[[rec().a]] =",
                        "test"});
            table58.AddRow(new string[] {
                        "2",
                        "[[rec().b]] =",
                        "nothing"});
            table58.AddRow(new string[] {
                        "3",
                        "[[rec().a]] =",
                        "warewolf"});
            table58.AddRow(new string[] {
                        "4",
                        "[[rec().b]] =",
                        "nothing"});
#line 318
   testRunner.And("the \"Assign To Merge\" debug inputs as", ((string)(null)), table58, "And ");
#line hidden
            TechTalk.SpecFlow.Table table59 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table59.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = test"});
            table59.AddRow(new string[] {
                        "2",
                        "[[rec(1).b]] = nothing"});
            table59.AddRow(new string[] {
                        "3",
                        "[[rec(2).a]] = warewolf"});
            table59.AddRow(new string[] {
                        "4",
                        "[[rec(2).b]] = nothing"});
#line 324
   testRunner.And("the \"Assign To Merge\" debug outputs as", ((string)(null)), table59, "And ");
#line hidden
            TechTalk.SpecFlow.Table table60 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "With",
                        "Using",
                        "Pad",
                        "Align"});
            table60.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = test",
                        "Index",
                        "\"4\"",
                        "\"\"",
                        "Left"});
            table60.AddRow(new string[] {
                        "2",
                        "[[rec(2).a]] = warewolf",
                        "Index",
                        "\"8\"",
                        "\"\"",
                        "Left"});
#line 330
   testRunner.And("the \"Data Merge\" debug inputs as", ((string)(null)), table60, "And ");
#line hidden
            TechTalk.SpecFlow.Table table61 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table61.AddRow(new string[] {
                        "[[result]] = testwarewolf"});
#line 334
   testRunner.And("the \"Data Merge\" debug outputs as", ((string)(null)), table61, "And ");
#line hidden
            TechTalk.SpecFlow.Table table62 = new TechTalk.SpecFlow.Table(new string[] {
                        "String to Split",
                        "Process Direction",
                        "Skip blank rows",
                        "#",
                        "",
                        "With",
                        "Using",
                        "Include",
                        "Escape"});
            table62.AddRow(new string[] {
                        "testwarewolf",
                        "Forward",
                        "No",
                        "1",
                        "[[rec(1).b]] = nothing",
                        "Index",
                        "4",
                        "No",
                        ""});
            table62.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "2",
                        "[[rec(2).b]] = nothing",
                        "Index",
                        "8",
                        "No",
                        ""});
#line 337
   testRunner.And("the \"Data Split\" debug inputs as", ((string)(null)), table62, "And ");
#line hidden
            TechTalk.SpecFlow.Table table63 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table63.AddRow(new string[] {
                        "1",
                        "[[rec(1).b]] = test"});
            table63.AddRow(new string[] {
                        "2",
                        "[[rec(2).b]] = warewolf"});
#line 341
   testRunner.And("the \"Data Split\" debug outputs as", ((string)(null)), table63, "And ");
#line hidden
            TechTalk.SpecFlow.Table table64 = new TechTalk.SpecFlow.Table(new string[] {
                        "In Field",
                        "Index",
                        "Characters",
                        "Direction"});
            table64.AddRow(new string[] {
                        "[[rec(2).a]] = warewolf",
                        "First Occurence",
                        "e",
                        "Left to Right"});
#line 345
      testRunner.And("the \"Index\" debug inputs as", ((string)(null)), table64, "And ");
#line hidden
            TechTalk.SpecFlow.Table table65 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table65.AddRow(new string[] {
                        "[[indexResult]] = 4"});
#line 348
   testRunner.And("the \"Index\" debug outputs as", ((string)(null)), table65, "And ");
#line hidden
            TechTalk.SpecFlow.Table table66 = new TechTalk.SpecFlow.Table(new string[] {
                        "In Field(s)",
                        "Find",
                        "Replace With"});
            table66.AddRow(new string[] {
                        "[[rec(1).a]] = test",
                        "",
                        ""});
            table66.AddRow(new string[] {
                        "[[rec(1).b]] = test",
                        "",
                        ""});
            table66.AddRow(new string[] {
                        "[[rec(2).a]] = warewolf",
                        "",
                        ""});
            table66.AddRow(new string[] {
                        "[[rec(2).b]] = warewolf",
                        "e",
                        "REPLACED"});
#line 351
   testRunner.And("the \"Replacing\" debug inputs as", ((string)(null)), table66, "And ");
#line hidden
            TechTalk.SpecFlow.Table table67 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table67.AddRow(new string[] {
                        "[[rec(1).a]] = tREPLACEDst"});
            table67.AddRow(new string[] {
                        "[[rec(1).b]] = tREPLACEDst"});
            table67.AddRow(new string[] {
                        "[[rec(2).a]] = warREPLACEDwolf"});
            table67.AddRow(new string[] {
                        "[[rec(2).b]] = warREPLACEDwolf"});
            table67.AddRow(new string[] {
                        "[[replaceResult]] = 4"});
#line 357
   testRunner.And("the \"Replacing\" debug outputs as", ((string)(null)), table67, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Execute a Sequence with Gather System Information, Date and Time Difference, Date" +
            " and Time, Random, and Format Number tools.")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Sequence")]
        public virtual void ExecuteASequenceWithGatherSystemInformationDateAndTimeDifferenceDateAndTimeRandomAndFormatNumberTools_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Execute a Sequence with Gather System Information, Date and Time Difference, Date" +
                    " and Time, Random, and Format Number tools.", ((string[])(null)));
#line 365
this.ScenarioSetup(scenarioInfo);
#line 366
      testRunner.Given("I have a Sequence \"Test\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table68 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "Selected"});
            table68.AddRow(new string[] {
                        "[[test]]",
                        "Date & Time"});
#line 367
   testRunner.And("\"Test\" contains Gather System Info \"Sys info\" as", ((string)(null)), table68, "And ");
#line hidden
            TechTalk.SpecFlow.Table table69 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input1",
                        "Input2",
                        "Input Format",
                        "Output In",
                        "Result"});
            table69.AddRow(new string[] {
                        "2013-11-29",
                        "2050-11-29",
                        "yyyy-mm-dd",
                        "Years",
                        "[[result1]]"});
#line 370
   testRunner.And("\"Test\" contains Date and Time Difference \"Date&Time\" as", ((string)(null)), table69, "And ");
#line hidden
            TechTalk.SpecFlow.Table table70 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input",
                        "Input Format",
                        "Add Time",
                        "Output Format",
                        "Result"});
            table70.AddRow(new string[] {
                        "2013-11-29",
                        "yyyy-mm-dd",
                        "1",
                        "yyyy-mm-dd",
                        "[[result2]]"});
#line 373
   testRunner.And("\"Test\" contains Date and Time \"Date\" as", ((string)(null)), table70, "And ");
#line hidden
            TechTalk.SpecFlow.Table table71 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "From",
                        "To",
                        "Result"});
            table71.AddRow(new string[] {
                        "Numbers",
                        "1",
                        "10",
                        "[[result3]]"});
#line 376
   testRunner.And("\"Test\" contains Random \"Random\" as", ((string)(null)), table71, "And ");
#line hidden
            TechTalk.SpecFlow.Table table72 = new TechTalk.SpecFlow.Table(new string[] {
                        "Number",
                        "Rounding Selected",
                        "Rounding To",
                        "Decimal to show",
                        "Result"});
            table72.AddRow(new string[] {
                        "788.894564545645",
                        "Up",
                        "3",
                        "3",
                        "[[result4]]"});
#line 379
   testRunner.And("\"Test\" contains Format Number \"Fnumber\" as", ((string)(null)), table72, "And ");
#line 382
   testRunner.When("the Sequence tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 383
   testRunner.Then("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table73 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        ""});
            table73.AddRow(new string[] {
                        "1",
                        "[[test]] =",
                        "Date & Time"});
#line 384
   testRunner.And("the \"Sys info\" debug inputs as", ((string)(null)), table73, "And ");
#line hidden
            TechTalk.SpecFlow.Table table74 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table74.AddRow(new string[] {
                        "1",
                        "[[test]] = String"});
#line 387
    testRunner.And("the \"Sys info\" debug outputs as", ((string)(null)), table74, "And ");
#line hidden
            TechTalk.SpecFlow.Table table75 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input 1",
                        "Input 2",
                        "Input Format",
                        "Output In"});
            table75.AddRow(new string[] {
                        "2013-11-29",
                        "2050-11-29",
                        "yyyy-mm-dd",
                        "Years"});
#line 390
      testRunner.And("the \"Date&Time\" debug inputs as", ((string)(null)), table75, "And ");
#line hidden
            TechTalk.SpecFlow.Table table76 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table76.AddRow(new string[] {
                        "[[result1]] = 37"});
#line 393
   testRunner.And("the \"Date&Time\" debug outputs as", ((string)(null)), table76, "And ");
#line hidden
            TechTalk.SpecFlow.Table table77 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input",
                        "Input Format",
                        "Add Time",
                        "",
                        "Output Format"});
            table77.AddRow(new string[] {
                        "2013-11-29",
                        "yyyy-mm-dd",
                        "Years",
                        "1",
                        "yyyy-mm-dd"});
#line 396
   testRunner.And("the \"Date\" debug inputs as", ((string)(null)), table77, "And ");
#line hidden
            TechTalk.SpecFlow.Table table78 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table78.AddRow(new string[] {
                        "[[result2]] = 2014-11-29"});
#line 399
   testRunner.And("the \"Date\" debug outputs as", ((string)(null)), table78, "And ");
#line hidden
            TechTalk.SpecFlow.Table table79 = new TechTalk.SpecFlow.Table(new string[] {
                        "Random",
                        "From",
                        "To"});
            table79.AddRow(new string[] {
                        "Numbers",
                        "1",
                        "10"});
#line 402
   testRunner.And("the \"Random\" debug inputs as", ((string)(null)), table79, "And ");
#line hidden
            TechTalk.SpecFlow.Table table80 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table80.AddRow(new string[] {
                        "[[result3]] = Int32"});
#line 405
   testRunner.And("the \"Random\" debug outputs as", ((string)(null)), table80, "And ");
#line hidden
            TechTalk.SpecFlow.Table table81 = new TechTalk.SpecFlow.Table(new string[] {
                        "Number",
                        "Rounding",
                        "Rounding Value",
                        "Decimals to show"});
            table81.AddRow(new string[] {
                        "788.894564545645",
                        "Up",
                        "3",
                        "3"});
#line 408
   testRunner.And("the \"Fnumber\" debug inputs as", ((string)(null)), table81, "And ");
#line hidden
            TechTalk.SpecFlow.Table table82 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table82.AddRow(new string[] {
                        "[[result4]] = 788.895"});
#line 411
   testRunner.And("the \"Fnumber\" debug outputs as", ((string)(null)), table82, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Execute a Sequence with For each")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Sequence")]
        public virtual void ExecuteASequenceWithForEach()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Execute a Sequence with For each", ((string[])(null)));
#line 415
this.ScenarioSetup(scenarioInfo);
#line 416
      testRunner.Given("I have a ForEach \"ForEachTest\" as \"NumOfExecution\" executions \"1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 417
   testRunner.And("I have a Sequence \"Test\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table83 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "Selected"});
            table83.AddRow(new string[] {
                        "[[test]]",
                        "Date & Time"});
#line 418
   testRunner.And("\"Test\" contains Gather System Info \"Sys info\" as", ((string)(null)), table83, "And ");
#line hidden
            TechTalk.SpecFlow.Table table84 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input1",
                        "Input2",
                        "Input Format",
                        "Output In",
                        "Result"});
            table84.AddRow(new string[] {
                        "2013-11-29",
                        "2050-11-29",
                        "yyyy-mm-dd",
                        "Years",
                        "[[result1]]"});
#line 421
   testRunner.And("\"Test\" contains Date and Time Difference \"Date&Time\" as", ((string)(null)), table84, "And ");
#line hidden
            TechTalk.SpecFlow.Table table85 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input",
                        "Input Format",
                        "Add Time",
                        "Output Format",
                        "Result"});
            table85.AddRow(new string[] {
                        "2013-11-29",
                        "yyyy-mm-dd",
                        "1",
                        "yyyy-mm-dd",
                        "[[result2]]"});
#line 424
   testRunner.And("\"Test\" contains Date and Time \"Date\" as", ((string)(null)), table85, "And ");
#line hidden
            TechTalk.SpecFlow.Table table86 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "From",
                        "To",
                        "Result"});
            table86.AddRow(new string[] {
                        "Numbers",
                        "1",
                        "10",
                        "[[result3]]"});
#line 427
   testRunner.And("\"Test\" contains Random \"Random\" as", ((string)(null)), table86, "And ");
#line hidden
            TechTalk.SpecFlow.Table table87 = new TechTalk.SpecFlow.Table(new string[] {
                        "Number",
                        "Rounding Selected",
                        "Rounding To",
                        "Decimal to show",
                        "Result"});
            table87.AddRow(new string[] {
                        "788.894564545645",
                        "Up",
                        "3",
                        "3",
                        "[[result4]]"});
#line 430
   testRunner.And("\"Test\" contains Format Number \"Fnumber\" as", ((string)(null)), table87, "And ");
#line 433
   testRunner.When("the ForEach \"ForEachTest\" tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 434
   testRunner.Then("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table88 = new TechTalk.SpecFlow.Table(new string[] {
                        "",
                        "Number"});
            table88.AddRow(new string[] {
                        "No. of Executes",
                        "1"});
#line 435
   testRunner.And("the \"ForEachTest\" debug inputs as", ((string)(null)), table88, "And ");
#line hidden
            TechTalk.SpecFlow.Table table89 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        ""});
            table89.AddRow(new string[] {
                        "1",
                        "[[test]] =",
                        "Date & Time"});
#line 438
    testRunner.And("the \"Sys info\" debug inputs as", ((string)(null)), table89, "And ");
#line hidden
            TechTalk.SpecFlow.Table table90 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table90.AddRow(new string[] {
                        "1",
                        "[[test]] = String"});
#line 441
     testRunner.And("the \"Sys info\" debug outputs as", ((string)(null)), table90, "And ");
#line hidden
            TechTalk.SpecFlow.Table table91 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input 1",
                        "Input 2",
                        "Input Format",
                        "Output In"});
            table91.AddRow(new string[] {
                        "2013-11-29",
                        "2050-11-29",
                        "yyyy-mm-dd",
                        "Years"});
#line 444
    testRunner.And("the \"Date&Time\" debug inputs as", ((string)(null)), table91, "And ");
#line hidden
            TechTalk.SpecFlow.Table table92 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table92.AddRow(new string[] {
                        "[[result1]] = 37"});
#line 447
   testRunner.And("the \"Date&Time\" debug outputs as", ((string)(null)), table92, "And ");
#line hidden
            TechTalk.SpecFlow.Table table93 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input",
                        "Input Format",
                        "Add Time",
                        "",
                        "Output Format"});
            table93.AddRow(new string[] {
                        "2013-11-29",
                        "yyyy-mm-dd",
                        "Years",
                        "1",
                        "yyyy-mm-dd"});
#line 450
   testRunner.And("the \"Date\" debug inputs as", ((string)(null)), table93, "And ");
#line hidden
            TechTalk.SpecFlow.Table table94 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table94.AddRow(new string[] {
                        "[[result2]] = 2014-11-29"});
#line 453
   testRunner.And("the \"Date\" debug outputs as", ((string)(null)), table94, "And ");
#line hidden
            TechTalk.SpecFlow.Table table95 = new TechTalk.SpecFlow.Table(new string[] {
                        "Random",
                        "From",
                        "To"});
            table95.AddRow(new string[] {
                        "Numbers",
                        "1",
                        "10"});
#line 456
   testRunner.And("the \"Random\" debug inputs as", ((string)(null)), table95, "And ");
#line hidden
            TechTalk.SpecFlow.Table table96 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table96.AddRow(new string[] {
                        "[[result3]] = Int32"});
#line 459
   testRunner.And("the \"Random\" debug outputs as", ((string)(null)), table96, "And ");
#line hidden
            TechTalk.SpecFlow.Table table97 = new TechTalk.SpecFlow.Table(new string[] {
                        "Number",
                        "Rounding",
                        "Rounding Value",
                        "Decimals to show"});
            table97.AddRow(new string[] {
                        "788.894564545645",
                        "Up",
                        "3",
                        "3"});
#line 462
   testRunner.And("the \"Fnumber\" debug inputs as", ((string)(null)), table97, "And ");
#line hidden
            TechTalk.SpecFlow.Table table98 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table98.AddRow(new string[] {
                        "[[result4]] = 788.895"});
#line 465
   testRunner.And("the \"Fnumber\" debug outputs as", ((string)(null)), table98, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Execute a Sequence with For each with 3 executions")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Sequence")]
        public virtual void ExecuteASequenceWithForEachWith3Executions()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Execute a Sequence with For each with 3 executions", ((string[])(null)));
#line 469
this.ScenarioSetup(scenarioInfo);
#line 470
      testRunner.Given("I have a ForEach \"ForEachTest\" as \"NumOfExecution\" executions \"3\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 471
   testRunner.And("I have a Sequence \"Test\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table99 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "Selected"});
            table99.AddRow(new string[] {
                        "[[test().date]]",
                        "Date & Time"});
#line 472
   testRunner.And("\"Test\" contains Gather System Info \"Sys info\" as", ((string)(null)), table99, "And ");
#line hidden
            TechTalk.SpecFlow.Table table100 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input1",
                        "Input2",
                        "Input Format",
                        "Output In",
                        "Result"});
            table100.AddRow(new string[] {
                        "2013-11-29",
                        "2050-11-29",
                        "yyyy-mm-dd",
                        "Years",
                        "[[test().result1]]"});
#line 475
   testRunner.And("\"Test\" contains Date and Time Difference \"Date&Time\" as", ((string)(null)), table100, "And ");
#line hidden
            TechTalk.SpecFlow.Table table101 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input",
                        "Input Format",
                        "Add Time",
                        "Output Format",
                        "Result"});
            table101.AddRow(new string[] {
                        "2013-11-29",
                        "yyyy-mm-dd",
                        "1",
                        "yyyy-mm-dd",
                        "[[test().result2]]"});
#line 478
   testRunner.And("\"Test\" contains Date and Time \"Date\" as", ((string)(null)), table101, "And ");
#line hidden
            TechTalk.SpecFlow.Table table102 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "From",
                        "To",
                        "Result"});
            table102.AddRow(new string[] {
                        "Numbers",
                        "1",
                        "10",
                        "[[test().result3]]"});
#line 481
   testRunner.And("\"Test\" contains Random \"Random\" as", ((string)(null)), table102, "And ");
#line hidden
            TechTalk.SpecFlow.Table table103 = new TechTalk.SpecFlow.Table(new string[] {
                        "Number",
                        "Rounding Selected",
                        "Rounding To",
                        "Decimal to show",
                        "Result"});
            table103.AddRow(new string[] {
                        "788.894564545645",
                        "Up",
                        "3",
                        "3",
                        "[[test().result4]]"});
#line 484
   testRunner.And("\"Test\" contains Format Number \"Fnumber\" as", ((string)(null)), table103, "And ");
#line 487
   testRunner.When("the ForEach \"ForEachTest\" tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 488
   testRunner.Then("the execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table104 = new TechTalk.SpecFlow.Table(new string[] {
                        "",
                        "Number"});
            table104.AddRow(new string[] {
                        "No. of Executes",
                        "3"});
#line 489
   testRunner.And("the \"ForEachTest\" debug inputs as", ((string)(null)), table104, "And ");
#line hidden
            TechTalk.SpecFlow.Table table105 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        ""});
            table105.AddRow(new string[] {
                        "1",
                        "[[test().date]] =",
                        "Date & Time"});
#line 492
    testRunner.And("the \"Sys info\" debug inputs as", ((string)(null)), table105, "And ");
#line hidden
            TechTalk.SpecFlow.Table table106 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table106.AddRow(new string[] {
                        "1",
                        "[[test(11).date]] = String"});
#line 495
     testRunner.And("the \"Sys info\" debug outputs as", ((string)(null)), table106, "And ");
#line hidden
            TechTalk.SpecFlow.Table table107 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input 1",
                        "Input 2",
                        "Input Format",
                        "Output In"});
            table107.AddRow(new string[] {
                        "2013-11-29",
                        "2050-11-29",
                        "yyyy-mm-dd",
                        "Years"});
#line 498
    testRunner.And("the \"Date&Time\" debug inputs as", ((string)(null)), table107, "And ");
#line hidden
            TechTalk.SpecFlow.Table table108 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table108.AddRow(new string[] {
                        "[[test(12).result1]] = 37"});
#line 501
   testRunner.And("the \"Date&Time\" debug outputs as", ((string)(null)), table108, "And ");
#line hidden
            TechTalk.SpecFlow.Table table109 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input",
                        "Input Format",
                        "Add Time",
                        "",
                        "Output Format"});
            table109.AddRow(new string[] {
                        "2013-11-29",
                        "yyyy-mm-dd",
                        "Years",
                        "1",
                        "yyyy-mm-dd"});
#line 504
   testRunner.And("the \"Date\" debug inputs as", ((string)(null)), table109, "And ");
#line hidden
            TechTalk.SpecFlow.Table table110 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table110.AddRow(new string[] {
                        "[[test(13).result2]] = 2014-11-29"});
#line 507
   testRunner.And("the \"Date\" debug outputs as", ((string)(null)), table110, "And ");
#line hidden
            TechTalk.SpecFlow.Table table111 = new TechTalk.SpecFlow.Table(new string[] {
                        "Random",
                        "From",
                        "To"});
            table111.AddRow(new string[] {
                        "Numbers",
                        "1",
                        "10"});
#line 510
   testRunner.And("the \"Random\" debug inputs as", ((string)(null)), table111, "And ");
#line hidden
            TechTalk.SpecFlow.Table table112 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table112.AddRow(new string[] {
                        "[[test(14).result3]] = Int32"});
#line 513
   testRunner.And("the \"Random\" debug outputs as", ((string)(null)), table112, "And ");
#line hidden
            TechTalk.SpecFlow.Table table113 = new TechTalk.SpecFlow.Table(new string[] {
                        "Number",
                        "Rounding",
                        "Rounding Value",
                        "Decimals to show"});
            table113.AddRow(new string[] {
                        "788.894564545645",
                        "Up",
                        "3",
                        "3"});
#line 516
   testRunner.And("the \"Fnumber\" debug inputs as", ((string)(null)), table113, "And ");
#line hidden
            TechTalk.SpecFlow.Table table114 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table114.AddRow(new string[] {
                        "[[test(15).result4]] = 788.895"});
#line 519
   testRunner.And("the \"Fnumber\" debug outputs as", ((string)(null)), table114, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Sending Error in error variable and calling webservice when inner activity errors" +
            "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Sequence")]
        public virtual void SendingErrorInErrorVariableAndCallingWebserviceWhenInnerActivityErrors()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Sending Error in error variable and calling webservice when inner activity errors" +
                    "", ((string[])(null)));
#line 523
this.ScenarioSetup(scenarioInfo);
#line 524
    testRunner.Given("I have a Sequence \"Test\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table115 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input1",
                        "Input2",
                        "Input Format",
                        "Output In",
                        "Result"});
            table115.AddRow(new string[] {
                        "2013-11-29",
                        "2050-11-29",
                        "yyyytt-mm-dd",
                        "Years",
                        "[[result1]]"});
#line 525
 testRunner.And("\"Test\" contains Date and Time Difference \"Date&Time\" as", ((string)(null)), table115, "And ");
#line 528
    testRunner.And("assign error to variable \"[[error]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 529
    testRunner.And("call the web service \"http://tst-ci-remote:3142/services/Test/OnError_WriteErrorS" +
                    "eq.xml?error=[[error]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 530
    testRunner.When("the Sequence tool is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 531
    testRunner.Then("the execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 532
    testRunner.And("the result from the web service \"http://tst-ci-remote:3142/services/Test/OnError_" +
                    "ReadErrorSeq.xml\" will have the same data as variable \"[[error]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table116 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input 1",
                        "Input 2",
                        "Input Format",
                        "Output In"});
            table116.AddRow(new string[] {
                        "2013-11-29",
                        "2050-11-29",
                        "yyyytt-mm-dd",
                        "Years"});
#line 533
   testRunner.And("the \"Date&Time\" debug inputs as", ((string)(null)), table116, "And ");
#line hidden
            TechTalk.SpecFlow.Table table117 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table117.AddRow(new string[] {
                        "[[result1]] ="});
#line 536
   testRunner.And("the \"Date&Time\" debug outputs as", ((string)(null)), table117, "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
